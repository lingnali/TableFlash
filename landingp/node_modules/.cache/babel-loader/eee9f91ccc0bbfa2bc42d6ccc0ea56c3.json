{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/lingnali/Desktop/TableFlash/landingp/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport { BrowserRouter as Router, Switch, Route, Link //useHistory,\n, useLocation //useParams\n} from \"react-router-dom\";\nimport styled, { css } from 'styled-components';\nimport UserGrid from './Profile/UserGrid';\nimport { Modal } from './Modal/Modal';\nimport Posts from './Posts'; // This example shows how to render two different screens\n// (or the same screen in a different context) at the same URL,\n// depending on how you got there.\n//\n// Click the \"featured images\" and see them full screen. Then\n// \"visit the gallery\" and click on the colors. Note the URL and\n// the component are the same as before but now we see them\n// inside a modal on top of the gallery screen.\n\nexport default function ModalGalleryExample() {\n  return /*#__PURE__*/_jsxDEV(Router, {\n    children: /*#__PURE__*/_jsxDEV(ModalSwitch, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 29,\n    columnNumber: 5\n  }, this);\n} // function ModalSwitch() {\n//   let location = useLocation();\n//   // This piece of state is set when one of the\n//   // gallery links is clicked. The `background` state\n//   // is the location that we were at when one of\n//   // the gallery links was clicked. If it's there,\n//   // use it as the location for the <Switch> so\n//   // we show the gallery in the background, behind\n//   // the modal.\n//   let background = location.state && location.state.background;\n//   return (\n//     <div>\n//       <Switch location={background || location}>\n//         <Route exact path=\"/\" children={<Home />} />\n//         <Route path=\"/gallery\" children={<Gallery />} />\n//         <Route path=\"/img/:id\" children={<ImageView />} />\n//       </Switch>\n//       {/* Show the modal when a background page is set */}\n//       {background && <Route path=\"/img/:id\" children={<Modal />} />}\n//     </div>\n//   );\n// }\n\n_c = ModalGalleryExample;\n\nclass ModalSwitch extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.previousLocation = this.props.location;\n  }\n\n  componentWillUpdate(nextProps) {\n    let {\n      location\n    } = this.props; // set previousLocation if props.location is not modal\n\n    if (nextProps.history.action !== \"POP\" && (!location.state || !location.state.modal)) {\n      this.previousLocation = this.props.location;\n    }\n  }\n\n  render() {\n    let {\n      location\n    } = this.props;\n    let isModal = location.state && location.state.modal && this.previousLocation !== location; // not initial render\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(Switch, {\n        location: isModal ? this.previousLocation : location,\n        children: [/*#__PURE__*/_jsxDEV(Route, {\n          exact: true,\n          path: \"/\",\n          component: Home\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Route, {\n          path: \"/gallery\",\n          component: Gallery\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Route, {\n          path: \"/img/:id\",\n          component: ImageView\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 9\n      }, this), isModal ? /*#__PURE__*/_jsxDEV(Route, {\n        path: \"/img/:id\",\n        component: Modal\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 20\n      }, this) : null]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 7\n    }, this);\n  }\n\n} // created style component\n\n\nexport const Image = styled.div`\n  width: 305px;\n  height: 305px;\n  background: no-repeat center/150% url(/img/${({\n  index\n}) => index}.png);\n  ${({\n  inModal\n}) => !inModal && css`\n    :hover {\n    opacity: .9;\n    }\n  `}\n`;\n_c2 = Image;\n\nfunction Home() {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Link, {\n      to: \"/gallery\",\n      children: \"Visit the Gallery\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Featured Images\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: [/*#__PURE__*/_jsxDEV(\"li\", {\n        children: /*#__PURE__*/_jsxDEV(Link, {\n          to: \"/img/2\",\n          children: \"Tomato\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 129,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n        children: /*#__PURE__*/_jsxDEV(Link, {\n          to: \"/img/4\",\n          children: \"Crimson\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 132,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 124,\n    columnNumber: 5\n  }, this);\n}\n\n_c3 = Home;\nconst PhotoGrid = styled.div`\n  display: grid;\n  grid-template-columns: repeat(3, 305px);\n  justify-content: center;\n  gap: 20px;\n`;\n_c4 = PhotoGrid;\n\nfunction Gallery() {\n  _s();\n\n  let location = useLocation();\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(UserGrid, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(PhotoGrid, {\n      children: Posts.map(i => /*#__PURE__*/_jsxDEV(Link, {\n        to: {\n          pathname: `/img/${i.id}`,\n          // This is the trick! This link sets\n          // the `background` in location state.\n          state: {\n            background: location\n          }\n        },\n        children: /*#__PURE__*/_jsxDEV(Image, {\n          index: i.id\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 163,\n          columnNumber: 13\n        }, this)\n      }, i.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 152,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 150,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Gallery, \"pkHmaVRPskBaU4tMJuJJpV42k1I=\", false, function () {\n  return [useLocation];\n});\n\n_c5 = Gallery;\n\nfunction ImageView({\n  match\n}) {\n  //let { id } = useParams();\n  let image = Posts[parseInt(match.params.id, 10) - 1];\n  if (!image) return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"Image not found\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 175,\n    columnNumber: 22\n  }, this);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: image.title\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 179,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Image, {\n      index: image.id\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 180,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 178,\n    columnNumber: 5\n  }, this);\n} // function Modal() {\n//   let history = useHistory();\n//   let { id } = useParams();\n//   let image = IMAGES[parseInt(id, 10) - 1];\n//   if (!image) return null;\n//   let back = e => {\n//     e.stopPropagation();\n//     history.goBack();\n//   };\n//   return (\n//     <div\n//       onClick={back}\n//       style={{\n//         position: \"absolute\",\n//         top: 0,\n//         left: 0,\n//         bottom: 0,\n//         right: 0,\n//         background: \"rgba(0, 0, 0, 0.15)\"\n//       }}\n//     >\n//       <div\n//         className=\"modal\"\n//         style={{\n//           position: \"absolute\",\n//           background: \"#fff\",\n//           top: 25,\n//           left: \"10%\",\n//           right: \"10%\",\n//           padding: 15,\n//           border: \"2px solid #444\"\n//         }}\n//       >\n//         <h1>{image.title}</h1>\n//         <Image inModal index={image.id} />\n//         <button type=\"button\" onClick={back}>\n//           Close\n//         </button>\n//       </div>\n//     </div>\n//   );\n// }\n\n\n_c6 = ImageView;\n\nvar _c, _c2, _c3, _c4, _c5, _c6;\n\n$RefreshReg$(_c, \"ModalGalleryExample\");\n$RefreshReg$(_c2, \"Image\");\n$RefreshReg$(_c3, \"Home\");\n$RefreshReg$(_c4, \"PhotoGrid\");\n$RefreshReg$(_c5, \"Gallery\");\n$RefreshReg$(_c6, \"ImageView\");","map":{"version":3,"sources":["/Users/lingnali/Desktop/TableFlash/landingp/src/App.js"],"names":["React","BrowserRouter","Router","Switch","Route","Link","useLocation","styled","css","UserGrid","Modal","Posts","ModalGalleryExample","ModalSwitch","Component","previousLocation","props","location","componentWillUpdate","nextProps","history","action","state","modal","render","isModal","Home","Gallery","ImageView","Image","div","index","inModal","PhotoGrid","map","i","pathname","id","background","match","image","parseInt","params","title"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link,\n  //useHistory,\n  useLocation\n  //useParams\n} from \"react-router-dom\";\n\nimport styled, {css} from 'styled-components';\nimport UserGrid from './Profile/UserGrid';\nimport {Modal} from './Modal/Modal';\nimport Posts from './Posts';\n\n\n// This example shows how to render two different screens\n// (or the same screen in a different context) at the same URL,\n// depending on how you got there.\n//\n// Click the \"featured images\" and see them full screen. Then\n// \"visit the gallery\" and click on the colors. Note the URL and\n// the component are the same as before but now we see them\n// inside a modal on top of the gallery screen.\n\nexport default function ModalGalleryExample() {\n  return (\n    <Router>\n      <ModalSwitch />\n    </Router>\n  );\n}\n\n// function ModalSwitch() {\n//   let location = useLocation();\n\n//   // This piece of state is set when one of the\n//   // gallery links is clicked. The `background` state\n//   // is the location that we were at when one of\n//   // the gallery links was clicked. If it's there,\n//   // use it as the location for the <Switch> so\n//   // we show the gallery in the background, behind\n//   // the modal.\n//   let background = location.state && location.state.background;\n\n//   return (\n//     <div>\n//       <Switch location={background || location}>\n//         <Route exact path=\"/\" children={<Home />} />\n//         <Route path=\"/gallery\" children={<Gallery />} />\n//         <Route path=\"/img/:id\" children={<ImageView />} />\n//       </Switch>\n\n//       {/* Show the modal when a background page is set */}\n//       {background && <Route path=\"/img/:id\" children={<Modal />} />}\n//     </div>\n//   );\n// }\n\nclass ModalSwitch extends React.Component {\n  // We can pass a location to <Switch/> that will tell it to\n  // ignore the router's current location and use the location\n  // prop instead.\n  //\n  // We can also use \"location state\" to tell the app the user\n  // wants to go to `/img/2` in a modal, rather than as the\n  // main page, keeping the gallery visible behind it.\n  //\n  // Normally, `/img/2` wouldn't match the gallery at `/`.\n  // So, to get both screens to render, we can save the old\n  // location and pass it to Switch, so it will think the location\n  // is still `/` even though its `/img/2`.\n  previousLocation = this.props.location;\n \n  componentWillUpdate(nextProps) {\n    let { location } = this.props;\n \n    // set previousLocation if props.location is not modal\n    if (\n      nextProps.history.action !== \"POP\" &&\n      (!location.state || !location.state.modal)\n    ) {\n      this.previousLocation = this.props.location;\n    }\n  }\n \n  render() {\n    let { location } = this.props;\n \n    let isModal = (\n      location.state &&\n      location.state.modal &&\n      this.previousLocation !== location\n    ); // not initial render\n \n    return (\n      <div>\n        <Switch location={isModal ? this.previousLocation : location}>\n          <Route exact path=\"/\" component={Home} />\n          <Route path=\"/gallery\" component={Gallery} />\n          <Route path=\"/img/:id\" component={ImageView} />\n        </Switch>\n        {isModal ? <Route path=\"/img/:id\" component={Modal} /> : null}\n      </div>\n    );\n  }\n}\n\n// created style component\nexport const Image = styled.div`\n  width: 305px;\n  height: 305px;\n  background: no-repeat center/150% url(/img/${({index}) => index}.png);\n  ${({inModal}) => !inModal && css`\n    :hover {\n    opacity: .9;\n    }\n  `}\n`\n\nfunction Home() {\n  return (\n    <div>\n      <Link to=\"/gallery\">Visit the Gallery</Link>\n      <h2>Featured Images</h2>\n      <ul>\n        <li>\n          <Link to=\"/img/2\">Tomato</Link>\n        </li>\n        <li>\n          <Link to=\"/img/4\">Crimson</Link>\n        </li>\n      </ul>\n    </div>\n  );\n}\n\nconst PhotoGrid = styled.div`\n  display: grid;\n  grid-template-columns: repeat(3, 305px);\n  justify-content: center;\n  gap: 20px;\n`\n\nfunction Gallery() {\n  let location = useLocation();\n\n  return (\n    <div>\n      <UserGrid/>\n      <PhotoGrid>\n        {Posts.map(i => (\n          <Link\n            key={i.id}\n            to={{\n              pathname: `/img/${i.id}`,\n              // This is the trick! This link sets\n              // the `background` in location state.\n              state: { background: location }\n            }}\n          >\n            <Image index={i.id} />\n          </Link>\n        ))}\n      </PhotoGrid>\n    </div>\n  );\n}\n\nfunction ImageView({match}) {\n  //let { id } = useParams();\n  let image = Posts[parseInt(match.params.id, 10) - 1];\n\n  if (!image) return <div>Image not found</div>;\n\n  return (\n    <div>\n      <h1>{image.title}</h1>\n      <Image index={image.id} />\n    </div>\n  );\n}\n\n// function Modal() {\n//   let history = useHistory();\n//   let { id } = useParams();\n//   let image = IMAGES[parseInt(id, 10) - 1];\n\n//   if (!image) return null;\n\n//   let back = e => {\n//     e.stopPropagation();\n//     history.goBack();\n//   };\n\n//   return (\n//     <div\n//       onClick={back}\n//       style={{\n//         position: \"absolute\",\n//         top: 0,\n//         left: 0,\n//         bottom: 0,\n//         right: 0,\n//         background: \"rgba(0, 0, 0, 0.15)\"\n//       }}\n//     >\n//       <div\n//         className=\"modal\"\n//         style={{\n//           position: \"absolute\",\n//           background: \"#fff\",\n//           top: 25,\n//           left: \"10%\",\n//           right: \"10%\",\n//           padding: 15,\n//           border: \"2px solid #444\"\n//         }}\n//       >\n//         <h1>{image.title}</h1>\n//         <Image inModal index={image.id} />\n//         <button type=\"button\" onClick={back}>\n//           Close\n//         </button>\n//       </div>\n//     </div>\n//   );\n// }\n"]},"metadata":{},"sourceType":"module"}